/**
----- Cruise Control System ------

Technical Report available at: https://abz2020.uni-ulm.de/resources/files/casestudyABZ2020v1.11.pdf

@author Lucas Pereira 68547
@author Ricardo Pereira 73577

**/

open util/ordering[Speed] as S

one sig Vehicle {
	-- sensors
	var key_state:					one KeyState,
	var engine:					one Engine,
	var rr_state:					one RRState,
	var rr_sensor:					one RRSensor,

	-- actuators
	var speed:						one Speed,
	//var brake_pressure:			one BrakePressure,
	var warning_acoustic:			one WarningAcoustic,
	var warning_visual:			one WarningVisual,

	-- cruise control var's
	var cruise_control:			one CruiseControl,
	var cruise_control_lever:		one CruiseControlLever,
	var speed_desired:			one Speed
}

enum Engine						{ On, Off }
enum KeyState					{ NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }
enum Speed						{ Stopped, Slow, Normal, Fast }
//enum BrakePressure			{ None, Full }
enum CruiseControl				{ CruiseControlOn, CruiseControlOff }
enum CruiseControlLever		{ Neutral, One, Two, Three, Four }
enum RRState						{ Ready, NotReady }
enum RRSensor					{ Clear, Obstacle }
enum WarningAcoustic			{ AcousticOn, AcousticOff }
enum WarningVisual				{ VisualOn, VisualOff }

pred init [v:Vehicle] {
	v.key_state = NoKeyInserted
	v.engine = Off
	v.speed = Stopped
	v.speed_desired = Stopped
	v.cruise_control = CruiseControlOff
	v.cruise_control_lever = Neutral
	v.rr_state = Ready
	v.rr_sensor = Clear
	v.warning_acoustic = AcousticOff
	v.warning_visual = VisualOff
}

pred skip {
	key_state' = key_state
	engine' = engine
	speed' = speed	
	speed_desired' = speed_desired
	cruise_control' = cruise_control
	cruise_control_lever' = cruise_control_lever
}

pred skip_2 {
	rr_state' = rr_state
	rr_sensor' = rr_sensor
	warning_visual' = warning_visual
	warning_acoustic' = warning_acoustic
}

pred engine_and_keystate_dont_change [ v : Vehicle ] {
	v.engine' = v.engine
	v.key_state' = v.key_state
}

pred cruise_control_dont_change [ v : Vehicle ] {
	v.cruise_control_lever' = v.cruise_control_lever
	v.cruise_control' = v.cruise_control
	v.speed_desired' = v.speed_desired
}

pred speed_and_brake_dont_change [ v : Vehicle ] {
	v.speed' = v.speed
	//v.brake_pressure' = v.brake_pressure
}

pred insert_key [v:Vehicle] {
	-- pre
	v.key_state = NoKeyInserted
	-- pos
	v.key_state' = KeyInserted
	-- frame
	v.engine' = v.engine
	cruise_control_dont_change [ v ]
	speed_and_brake_dont_change [ v ]
}

pred turn_engine_on [v:Vehicle] {
	-- pre
	v.key_state = KeyInserted
	v.engine = Off
	-- pos
	v.key_state' = KeyInIgnitionOnPosition
	v.engine' = On
	-- frame
	speed_and_brake_dont_change [ v ]
	cruise_control_dont_change [ v ]
}

pred speed_change_up [v:Vehicle] {
	-- pre
	v.engine = On
	//v.cruise_control = CruiseControlOff
	v.cruise_control_lever = Neutral
	-- pos
	v.engine' = On
	//v.cruise_control' = CruiseControlOff
	v.cruise_control_lever' = Neutral
	v.speed' =  v.speed.S/next
	-- frame
	v.cruise_control' = v.cruise_control
	v.key_state' = v.key_state
	v.speed_desired' = v.speed_desired
	
}

pred speed_change_down [v:Vehicle] {
	-- pre
	v.engine = On
	//v.cruise_control = CruiseControlOff
	v.cruise_control_lever = Neutral
	-- pos
	v.engine' = On
	//v.cruise_control' = CruiseControlOff
	v.cruise_control_lever' = Neutral
	v.speed' =  v.speed.S/prev
	-- frame
	v.cruise_control' = v.cruise_control
	v.key_state' = v.key_state
	v.speed_desired' = v.speed_desired
}

pred speed_change_cc_2 [v:Vehicle] {
	-- pre
	v.cruise_control = CruiseControlOn
	v.cruise_control_lever = Neutral
	v.speed = v.speed_desired.S/next
	-- pos
	v.cruise_control' = CruiseControlOn
	v.cruise_control_lever' = Neutral
	v.speed' = v.speed.S/next
	-- frame
	v.speed_desired' = v.speed_desired
	engine_and_keystate_dont_change[v]
}

pred speed_change_cc_3 [v:Vehicle] {
	-- pre
	v.cruise_control = CruiseControlOn
	v.cruise_control_lever = Neutral
	v.speed = v.speed_desired.S/prev
	-- pos
	v.cruise_control' = CruiseControlOn
	v.cruise_control_lever' = Neutral
	v.speed' = v.speed.S/prev
	-- frame
	v.speed_desired' = v.speed_desired
	engine_and_keystate_dont_change[v]
}

pred cruise_control_lever_default_neutral [v:Vehicle] {
	-- pre
	v.cruise_control_lever not in Neutral
	-- pos
	v.cruise_control_lever' = Neutral
	-- frame
	v.cruise_control' = v.cruise_control
	v.speed_desired' = v.speed_desired
	engine_and_keystate_dont_change [ v ]
	speed_and_brake_dont_change [ v ]
}

pred change_cruise_control_lever_neutral [v:Vehicle] {
	-- pre
	v.cruise_control_lever not in Neutral
	-- pos
	v.cruise_control_lever' = Neutral
	-- frame
	v.cruise_control' = v.cruise_control
	v.speed_desired' = v.speed_desired
	engine_and_keystate_dont_change [ v ]
	speed_and_brake_dont_change [ v ]
}

pred change_cruise_control_lever_one [v:Vehicle] {
	-- pre
	v.engine = On
	v.cruise_control = CruiseControlOff
	v.cruise_control_lever = Neutral
	v.speed_desired = Stopped
	-- pos
	v.engine' = On
	v.cruise_control' = CruiseControlOn
	v.cruise_control_lever' = One
	v.speed_desired' = v.speed
	-- frame
	v.key_state' = v.key_state
	speed_and_brake_dont_change[v]
}

pred change_cruise_control_lever_two [v:Vehicle] {
	-- pre
	v.cruise_control = CruiseControlOn
	v.cruise_control_lever = Neutral
	-- pos
	v.cruise_control' = CruiseControlOn
	v.cruise_control_lever' = Two
	v.speed_desired' = v.speed_desired.S/next
	-- frame
	speed_and_brake_dont_change[v]
	engine_and_keystate_dont_change[v]
}

pred change_cruise_control_lever_three [v:Vehicle] {
	-- pre
	v.cruise_control = CruiseControlOn
	v.cruise_control_lever = Neutral
	-- pos
	v.cruise_control' = CruiseControlOn
	v.cruise_control_lever' = Two
	v.speed_desired' = v.speed_desired.S/next
	-- frame
	speed_and_brake_dont_change[v]
	engine_and_keystate_dont_change[v]
}

pred change_cruise_control_lever_four [v:Vehicle] {
	-- pre
	v.engine = On
	v.cruise_control = CruiseControlOn
	v.cruise_control_lever = Neutral
	-- pos
	v.engine' = On
	v.cruise_control' = CruiseControlOff
	v.cruise_control_lever' = Four
	v.speed_desired' = Stopped
	-- frame
	v.key_state' = v.key_state
	speed_and_brake_dont_change[v]
}

pred rr_sensor_change_obstacle_visual [v:Vehicle] {
	-- pre
	v.rr_state = Ready
	v.rr_sensor = Clear
	v.speed = Stopped
	-- pos
	v.rr_state' = Ready
	v.rr_sensor' = Obstacle
	v.warning_visual' = VisualOn
	v.speed' = Stopped
	-- frame
	v.warning_acoustic' = v.warning_acoustic
}

pred rr_sensor_change_clear_visual [v:Vehicle] {
	-- pre
	v.rr_state = Ready
	v.rr_sensor = Obstacle
	v.speed = Stopped
	v.warning_visual = VisualOn
	-- pos
	v.rr_state' = Ready
	v.rr_sensor' = Clear
	v.speed' = Stopped
	v.warning_visual' = VisualOff
	-- frame
	v.warning_acoustic' = v.warning_acoustic
}

pred rr_sensor_change_obstacle_acoustic [v:Vehicle] {
	-- pre
	v.rr_state = Ready
	v.rr_sensor = Clear
	v.speed = Normal
	-- pos
	v.rr_state' = Ready
	v.rr_sensor' = Obstacle
	v.warning_acoustic' = AcousticOn
	v.speed' = Normal
	-- frame
	v.warning_acoustic' = v.warning_acoustic
}

pred rr_sensor_change_clear_acoustic [v:Vehicle] {
	-- pre
	v.rr_state = Ready
	v.rr_sensor = Obstacle
	v.speed = Normal
	v.warning_acoustic = AcousticOn
	-- pos
	v.rr_state' = Ready
	v.rr_sensor' = Clear
	v.speed' = Normal
	v.warning_acoustic' = AcousticOff
	-- frame
	v.warning_visual' = v.warning_visual
}

fact initialize {
	all v:Vehicle | init[v]
}

fact transitions {
	always ( all v:Vehicle | insert_key[v] or
							turn_engine_on[v] or
							speed_change_up[v] or
							speed_change_down[v] or
							change_cruise_control_lever_one [v] or
							change_cruise_control_lever_two [v] or
							change_cruise_control_lever_three [v] or
							change_cruise_control_lever_four [v] or
							change_cruise_control_lever_neutral [v] )
							/*speed_change_cc_2 [v] or
							speed_change_cc_3 [v] ) or
							skip)*/
}

fact sensors {
	always ( all v:Vehicle | rr_sensor_change_obstacle_visual [v] or
							rr_sensor_change_clear_visual [v] or
							rr_sensor_change_obstacle_acoustic [v] or
							rr_sensor_change_clear_acoustic [v] or
							skip_2)
}

fact always_ {
	//always ( all v:Vehicle | not v.speed = v.speed_desired implies  v.speed' = v.speed_desired'  )
}

run {
	eventually (all v:Vehicle | v.speed = Normal)
	eventually (all v:Vehicle | v.rr_sensor = Obstacle)
}

/** NOTAS:
O predicado skip faz sentido pois o estado do veículo pode se manter inalterado entre estados mas
para testes deixámos de fora para não termos que efetuar forks.
**/
