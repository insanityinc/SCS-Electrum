/*
	v.cc_lever' = v.cc_lever
	v.key_state' = v.key_state
	v.engine' = v.engine
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.speed' = v.speed
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning
*/

sig Vehicle {
	-- cruise control lever
	var cc_lever :				one SCSLever,
	-- sensors
	var key_state :				one KeyState,
	var engine :				one Engine,
	var rr_state :				one RRState,
	var rr_sensor :				one RRSensor,
	-- actuators
	var speed :				one Speed,
	var brake_pressure :		one BrakePressure,
	var acoustic_warning :	one AcousticWarning,
	var visual_warning :		one VisualWarning
}

enum SCSLever				{ Neutral, One, Two, Three, Four, Five, Six }
enum KeyState				{ NoKeyInserted, KeyInserted, KeyInIgnitionOnPosition }
enum Engine					{ On, Off }
enum RRState					{ Ready, Dirty, NotReady }
enum RRSensor				{ Clear, Obstacle, Unknown }
enum Speed					{ Stopped, Slow, Normal, Fast }
enum BrakePressure			{ Zero, Quarter, Half, Full }
enum AcousticWarning		{ AcousticOn, AcousticOff }
enum VisualWarning			{ VisualOn, VisualOff }

-- initialization
pred init [ v : Vehicle ] {
	v.cc_lever = Neutral
	v.key_state = NoKeyInserted
	v.engine = Off
	v.rr_state = Ready
	v.rr_sensor = Clear
	v.speed = Stopped
	v.brake_pressure = Zero
	v.acoustic_warning = AcousticOff
	v.visual_warning = VisualOff
}

pred insert_key [ v : Vehicle ] {
	-- pre
	v.key_state = NoKeyInserted
	-- pos
	v.key_state' = KeyInserted
	-- frame
	v.cc_lever' = v.cc_lever
	v.engine' = v.engine
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.speed' = v.speed
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning
}

pred turn_engine_on [ v : Vehicle ] {
	-- pre
	v.key_state = KeyInserted
	v.engine = Off
	-- pos
	v.key_state' = KeyInIgnitionOnPosition
	v.engine' = On
	-- frame
	v.cc_lever' = v.cc_lever
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.speed' = v.speed
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning	
}

pred speed_change_slow [ v : Vehicle ] {
	-- pre
	v.speed = Stopped
	-- pos
	v.speed' = Slow
	-- frame
	v.cc_lever' = v.cc_lever
	v.key_state' = v.key_state
	v.engine' = v.engine
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning
}

pred speed_change_normal [ v : Vehicle ] {
	-- pre
	v.speed = Slow
	-- pos
	v.speed' = Normal
	-- frame
	v.cc_lever' = v.cc_lever
	v.key_state' = v.key_state
	v.engine' = v.engine
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning
}

pred speed_change_fast [ v : Vehicle ] {
	-- pre
	v.speed = Normal
	-- pos
	v.speed' = Fast
	-- frame
	v.cc_lever' = v.cc_lever
	v.key_state' = v.key_state
	v.engine' = v.engine
	v.rr_state' = v.rr_state
	v.rr_sensor' = v.rr_sensor
	v.brake_pressure' = v.brake_pressure
	v.acoustic_warning' = v.acoustic_warning
	v.visual_warning' = v.visual_warning
}

-- do nothing
pred skip {
	cc_lever' = cc_lever
	key_state' = key_state
	engine' = engine
	rr_state' = rr_state
	rr_sensor' = rr_sensor
	speed' = speed
	brake_pressure' = brake_pressure
	acoustic_warning' = acoustic_warning
	visual_warning' = visual_warning
}

fact init {
	all v : Vehicle | init [v]
}

fact transitions {
	always ( all v : Vehicle | insert_key [ v ] or turn_engine_on [ v ] or
							   speed_change_slow [ v ] or speed_change_normal [ v ] or speed_change_fast [ v ] or
							   skip )
	eventually Vehicle.engine = On
}

run {  } for 1 but exactly 1 Vehicle
